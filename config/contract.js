var fs = require('fs');
var contractPath = './contract/DataContract1.sol';
var contractPathBusinessRule = './contract/BusinessRules.sol';
var Web3 = require('web3');
var NodeURL = "http://54.242.222.243:22000";
var account = '0xed9d02e382b34818e88b88a309c7fe71e65f419d';
var PrivateTo = "ROAZBWtSacxXQrOe3FGAqJDyJjFePR5ce4TSIzmJ0Bc=";
var dbUrl = require("../config/db");
var contractFolder = '../contract/';
var abiDefination = require('../config/abi');

module.exports = {
  PublishDataContract: function (doc, LetterofCredit, callback) {  
      
      if (typeof web3 !== 'undefined') { web3 = new Web3(web3.currentProvider); }
      else { web3 = new Web3(new Web3.providers.HttpProvider(NodeURL)); }
      web3.eth.defaultAccount = account;
      var Bytecode ='0x606060405234156200001057600080fd5b60405162000f6738038062000f678339810160405280805182019190602001805182019190505080600090805190602001906200004f929190620000ec565b50816001908051906020019062000068929190620000ec565b5060206040519081016040528060008152506002908051906020019062000091929190620000ec565b50602060405190810160405280600081525060039080519060200190620000ba929190620000ec565b50602060405190810160405280600081525060049080519060200190620000e3929190620000ec565b5050506200019b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200012f57805160ff191683800117855562000160565b8280016001018555821562000160579182015b828111156200015f57825182559160200191906001019062000142565b5b5090506200016f919062000173565b5090565b6200019891905b80821115620001945760008160009055506001016200017a565b5090565b90565b610dbc80620001ab6000396000f3006060604052600436106100b9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168062bb4c71146100be5780631da91e921461014c578063205cb586146101da57806366a9d4d514610268578063672fd829146102f65780638abfdcba146103845780638ffa371414610412578063a64d342a146104a0578063b0a3b872146104fd578063bcb3a3151461055a578063da984467146105e8578063e358666a14610676575b600080fd5b34156100c957600080fd5b6100d16106d3565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101115780820151818401526020810190506100f6565b50505050905090810190601f16801561013e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015757600080fd5b61015f61077b565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561019f578082015181840152602081019050610184565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156101e557600080fd5b6101ed610823565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561022d578082015181840152602081019050610212565b50505050905090810190601f16801561025a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027357600080fd5b61027b6108c1565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102bb5780820151818401526020810190506102a0565b50505050905090810190601f1680156102e85780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561030157600080fd5b610309610969565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561034957808201518184015260208101905061032e565b50505050905090810190601f1680156103765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561038f57600080fd5b610397610a07565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d75780820151818401526020810190506103bc565b50505050905090810190601f1680156104045780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561041d57600080fd5b610425610aa5565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561046557808201518184015260208101905061044a565b50505050905090810190601f1680156104925780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104ab57600080fd5b6104fb600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b43565b005b341561050857600080fd5b610558600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b5d565b005b341561056557600080fd5b61056d610b77565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105ad578082015181840152602081019050610592565b50505050905090810190601f1680156105da5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156105f357600080fd5b6105fb610c15565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561063b578082015181840152602081019050610620565b50505050905090810190601f1680156106685780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561068157600080fd5b6106d1600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610cbd565b005b6106db610cd7565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107715780601f1061074657610100808354040283529160200191610771565b820191906000526020600020905b81548152906001019060200180831161075457829003601f168201915b5050505050905090565b610783610cd7565b60038054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108195780601f106107ee57610100808354040283529160200191610819565b820191906000526020600020905b8154815290600101906020018083116107fc57829003601f168201915b5050505050905090565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108b95780601f1061088e576101008083540402835291602001916108b9565b820191906000526020600020905b81548152906001019060200180831161089c57829003601f168201915b505050505081565b6108c9610cd7565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b5050505050905090565b60028054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109ff5780601f106109d4576101008083540402835291602001916109ff565b820191906000526020600020905b8154815290600101906020018083116109e257829003601f168201915b505050505081565b60008054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a9d5780601f10610a7257610100808354040283529160200191610a9d565b820191906000526020600020905b815481529060010190602001808311610a8057829003601f168201915b505050505081565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b505050505081565b8060029080519060200190610b59929190610ceb565b5050565b8060039080519060200190610b73929190610ceb565b5050565b60038054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c0d5780601f10610be257610100808354040283529160200191610c0d565b820191906000526020600020905b815481529060010190602001808311610bf057829003601f168201915b505050505081565b610c1d610cd7565b60028054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610cb35780601f10610c8857610100808354040283529160200191610cb3565b820191906000526020600020905b815481529060010190602001808311610c9657829003601f168201915b5050505050905090565b8060049080519060200190610cd3929190610ceb565b5050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d2c57805160ff1916838001178555610d5a565b82800160010185558215610d5a579182015b82811115610d59578251825591602001919060010190610d3e565b5b509050610d679190610d6b565b5090565b610d8d91905b80821115610d89576000816000905550600101610d71565b5090565b905600a165627a7a723058208ec802542038fcf3c36e755a5a976a50920acb28c95c920af24d58ba5262b9c10029';
      var abiDefinition = abiDefination.abi;
      var simpleContract = web3.eth.contract(abiDefinition);
      var simple = simpleContract.new(JSON.stringify(doc),JSON.stringify(LetterofCredit), { from: web3.eth.defaultAccount, data: Bytecode, gas: 30000000, privateFor: [PrivateTo] }, function (e, contract) {
        if (e) {
          console.log("err creating contract:", e);
        } else {
          if (!contract.address) {
            var transactionHash = contract.transactionHash;
            var contractaddress = contract.address;
            console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
          } else {
            var transactionHash = contract.transactionHash;
            var contractaddress = contract.address;
            console.log("Contract mined! Address: " + contract.address);
            //Save all the contract details in MongoDB
            var mongojs = require('mongojs');
            var db = mongojs(dbUrl.url, ['SmartContracst']);
            var cData = { 'bolid': JSON.stringify(doc._id).replace(/"/g, ""), 'abi': abiDefinition, 'contractaddress': contractaddress, 'contracthash': transactionHash };
            db.SmartContracst.insert(cData, function (err, doc) {
              if (err) { console.log(" Woops! The error took place here... "); }
              else { db.close(); callback('ok', doc); }
            });
          }
        }
      });
  },

  PublishBusinessRuleContract: function (id, callback) {
      if (typeof web3 !== 'undefined') { web3 = new Web3(web3.currentProvider); }
      else { web3 = new Web3(new Web3.providers.HttpProvider(NodeURL)); }
      web3.eth.defaultAccount = account;
      var bytecode = '0x6060604052341561000f57600080fd5b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061124f8061005e6000396000f3006060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630278cad51461010157806302d05d3f1461012e5780630944e79f146101835780630f480ee6146101b05780631d38f627146101dd5780633cd8caec1461027d57806341c0e1b51461031d5780634a7522ee1461033257806353ab5d0a1461035f57806362b27d291461038c57806364686786146103e95780636c0bb4fd146104895780636f698319146105295780638c09214414610556578063a5e9156014610583578063f56bed88146105e0578063fc0d94dc146106c3578063fcf4f865146106f0575b600080fd5b341561010c57600080fd5b6101146107d3565b604051808215151515815260200191505060405180910390f35b341561013957600080fd5b6101416107e6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561018e57600080fd5b61019661080b565b604051808215151515815260200191505060405180910390f35b34156101bb57600080fd5b6101c361081e565b604051808215151515815260200191505060405180910390f35b34156101e857600080fd5b61027b600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610831565b005b341561028857600080fd5b61031b600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061091d565b005b341561032857600080fd5b610330610a09565b005b341561033d57600080fd5b610345610a9a565b604051808215151515815260200191505060405180910390f35b341561036a57600080fd5b610372610aad565b604051808215151515815260200191505060405180910390f35b341561039757600080fd5b6103e7600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610ac0565b005b34156103f457600080fd5b610487600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610b7e565b005b341561049457600080fd5b610527600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610c6a565b005b341561053457600080fd5b61053c610d56565b604051808215151515815260200191505060405180910390f35b341561056157600080fd5b610569610d69565b604051808215151515815260200191505060405180910390f35b341561058e57600080fd5b6105de600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610d7c565b005b34156105eb57600080fd5b6106c1600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610e3a565b005b34156106ce57600080fd5b6106d6611025565b604051808215151515815260200191505060405180910390f35b34156106fb57600080fd5b6107d1600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050611038565b005b600060169054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060149054906101000a900460ff1681565b600060159054906101000a900460ff1681565b806040518082805190602001908083835b6020831015156108675780518252602082019150602081019050602083039250610842565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040518082805190602001908083835b6020831015156108ce57805182526020820191506020810190506020830392506108a9565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916146000601a6101000a81548160ff0219169083151502179055505050565b806040518082805190602001908083835b602083101515610953578051825260208201915060208101905060208303925061092e565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040518082805190602001908083835b6020831015156109ba5780518252602082019150602081019050602083039250610995565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614600060156101000a81548160ff0219169083151502179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610a98576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16ff5b565b6000601a9054906101000a900460ff1681565b600060189054906101000a900460ff1681565b806040518082805190602001908083835b602083101515610af65780518252602082019150602081019050602083039250610ad1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660405180807f436c656172000000000000000000000000000000000000000000000000000000815250600501905060405180910390206000191614600060146101000a81548160ff02191690831515021790555050565b806040518082805190602001908083835b602083101515610bb45780518252602082019150602081019050602083039250610b8f565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040518082805190602001908083835b602083101515610c1b5780518252602082019150602081019050602083039250610bf6565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916146000601b6101000a81548160ff0219169083151502179055505050565b806040518082805190602001908083835b602083101515610ca05780518252602082019150602081019050602083039250610c7b565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040518082805190602001908083835b602083101515610d075780518252602082019150602081019050602083039250610ce2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614600060196101000a81548160ff0219169083151502179055505050565b600060199054906101000a900460ff1681565b6000601b9054906101000a900460ff1681565b60405180807f53686970706564204f6e20426f6172642042696c6c206f66204c6164696e6700815250601f019050604051809103902060001916816040518082805190602001908083835b602083101515610dec5780518252602082019150602081019050602083039250610dc7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614600060166101000a81548160ff02191690831515021790555050565b816040518082805190602001908083835b602083101515610e705780518252602082019150602081019050602083039250610e4b565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040518082805190602001908083835b602083101515610ed75780518252602082019150602081019050602083039250610eb2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614600060186101000a81548160ff021916908315150217905550600060189054906101000a900460ff161561102057806040518082805190602001908083835b602083101515610f6d5780518252602082019150602081019050602083039250610f48565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040518082805190602001908083835b602083101515610fd45780518252602082019150602081019050602083039250610faf565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614600060186101000a81548160ff0219169083151502179055505b505050565b600060179054906101000a900460ff1681565b816040518082805190602001908083835b60208310151561106e5780518252602082019150602081019050602083039250611049565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040518082805190602001908083835b6020831015156110d557805182526020820191506020810190506020830392506110b0565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614600060176101000a81548160ff021916908315150217905550600060179054906101000a900460ff161561121e57806040518082805190602001908083835b60208310151561116b5780518252602082019150602081019050602083039250611146565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916826040518082805190602001908083835b6020831015156111d257805182526020820191506020810190506020830392506111ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614600060176101000a81548160ff0219169083151502179055505b5050505600a165627a7a7230582067a2944c16c19e36080046124e8d3cee102ab48179552f0f7f04b0d5f556484d0029'
      var abiDefinition = abiDefination.abibr;
      var simpleContract = web3.eth.contract(abiDefinition);
      var simple = simpleContract.new({ from: web3.eth.defaultAccount, data: bytecode, gas: 30000000, privateFor: [PrivateTo] }, function (e, contract) {
        if (e) {
          console.log("error creating contract:", e);
        } else {
          if (!contract.address) {
            var transactionHash = contract.transactionHash;
            var contractaddress = contract.address;
            console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
          } else {
            var transactionHash = contract.transactionHash;
            var contractaddress = contract.address;
            console.log("Contract mined! Address: " + contract.address);
            //Update all the contract details in MongoDB
            var mongojs = require('mongojs');
            var db = mongojs(dbUrl.url, ['SmartContracst']);
            db.SmartContracst.findAndModify({
              query: { bolid: id },
              update: {
                $set: { abibr: abiDefinition, contractaddressbr: contractaddress, contracthashbr: transactionHash }
              }, new: false
            }, function (err, doc) {
              if (err) { console.log(" Woops! The error took place here... "); }
              else { db.close(); callback("ok"); }
            });
          }
        }
      });
  },
  saveShippingCompanyData: function (docSC, callback) {
    var mongojs = require('mongojs');
    var db = mongojs(dbUrl.url, ['SmartContracst']);
    db.SmartContracst.findOne({ bolid: JSON.stringify(docSC._id).replace(/"/g, "") }, function (err, doccontract) {
      if (doccontract) {
        if (typeof web3 !== 'undefined') {
          web3 = new Web3(web3.currentProvider);
        }
        else {
          web3 = new Web3(new Web3.providers.HttpProvider(NodeURL));
        }
        var address = doccontract.contractaddress;
        var abi = doccontract.abi;
        var MyContract = web3.eth.contract(abi).at(address);
        var flag = MyContract.setShippingCompanyData(JSON.stringify(docSC), { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        console.log(flag);
        db.close();
        callback("ok");
      }
    });
  },

  saveShippingCompanyLoadingData: function (docSCL, callback) {
    var mongojs = require('mongojs');
    var db = mongojs(dbUrl.url, ['SmartContracst']);
    db.SmartContracst.findOne({ bolid: JSON.stringify(docSCL._id).replace(/"/g, "") }, function (err, docc) {
      if (docc) {
        if (typeof web3 !== 'undefined') {
          web3 = new Web3(web3.currentProvider);
        }
        else {
          web3 = new Web3(new Web3.providers.HttpProvider(NodeURL));
        }
        var address = docc.contractaddress;
        var abi = docc.abi;
        var MyContract = web3.eth.contract(abi).at(address);
        var flag = MyContract.setShippingCompanyLoadingData(JSON.stringify(docSCL), { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        db.close();
        console.log(flag);
        callback("ok");
      }
    });
  },

  saveShippingCompanyUnLoadingData: function (docSCL, callback) {
    var mongojs = require('mongojs');
    var db = mongojs(dbUrl.url, ['SmartContracst']);
    db.SmartContracst.findOne({ bolid: JSON.stringify(docSCL._id).replace(/"/g, "") }, function (err, docc) {
      if (docc) {
        if (typeof web3 !== 'undefined') {
          web3 = new Web3(web3.currentProvider);
        }
        else {
          web3 = new Web3(new Web3.providers.HttpProvider(NodeURL));
        }
        var address = docc.contractaddress;
        var abi = docc.abi;
        var MyContract = web3.eth.contract(abi).at(address);
        var flag = MyContract.setShippingCompanyUnLoadingData(JSON.stringify(docSCL), { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        console.log(flag);
        db.close();
        callback("ok");
      }
    });
  },

  ExecuteBusinessRules: function (id, callback) {
    var mongojs = require('mongojs');
    var db = mongojs(dbUrl.url, ['SmartContracst']);
    db.SmartContracst.findOne({ bolid: id }, function (err, docc) {
      if (docc) {
        if (typeof web3 !== 'undefined') {
          web3 = new Web3(web3.currentProvider);
        }
        else {
          web3 = new Web3(new Web3.providers.HttpProvider(NodeURL));
        }
        var ContractAddress = docc.contractaddress;
        var ContractAddressBR = docc.contractaddressbr;
        var abi = docc.abi;
        var abibr = docc.abibr;
        var MyContract = web3.eth.contract(abi).at(ContractAddress);
        var MyContractBR = web3.eth.contract(abibr).at(ContractAddressBR);
        var BOLData = JSON.parse(MyContract.ShippingCompanyUnLoadingData());
        var LOCData = JSON.parse(MyContract.LetterofCreditData());
        MyContractBR.setCleanOrFoul(BOLData.cleanorfoul, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        MyContractBR.setBillLadingIssued(BOLData.bolissued, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        MyContractBR.setGoodsIntegrity(BOLData.placeofhandingover,BOLData.placeofreceipt, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        MyContractBR.setContainerIntigrity(BOLData.containerfid,BOLData.containerefidload,BOLData.containerrfidunload, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        MyContractBR.setHandlingUnitCount(BOLData.consignmentData.length,BOLData.consignmentDataShippingCompany.length,BOLData.unloadconsignmentdata.length, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        MyContractBR.setLoadingPort(BOLData.gpscoordinatesofportofloading,LOCData.PortofLoading, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        MyContractBR.setDestinationPort(BOLData.portofdischargegps,LOCData.PortofDestination, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        MyContractBR.setConsignee(BOLData.consignee,LOCData.DetailsofConsignee, { from: web3.eth.coinbase, gas: 60000000, privateFor: [PrivateTo] });
        db.close();
        callback("OK");
      }
    });

  },
  GetBusinessRules: function (doc, callback) {
        if (typeof web3 !== 'undefined') {
          web3 = new Web3(web3.currentProvider);
        }
        else {
          web3 = new Web3(new Web3.providers.HttpProvider(NodeURL));
        }
        var address = doc.contractaddress;
        var abi = doc.abi;
        var MyContractLoC = web3.eth.contract(abi).at(address);
        var LOCData = JSON.parse(MyContractLoC.LetterofCreditData());
        var addressbr = doc.contractaddressbr;
        var abibr = doc.abibr;
        var MyContract = web3.eth.contract(abibr).at(addressbr);
        var BusinessRules = {'b1':{'label':'"Clean" Bill of Lading should be issued by Shipping Company.','outcome':false,'Justification':'','liable':''},
        'b2':{'label':'Final Status of Bill of Lading should be "Shipped Onboard Bill of Lading i.e. confirmation that goods have been onboarded onto vessel','outcome':false,'Justification':'','liable':''},
        'b3':{'label':'Integrity of Container Details (Same RFID of a Container at all three GPS Coordinates: @Place of Receipt, Port of Loading & Port of Discharge)','outcome':false,'Justification':'','liable':''},
        'b4':{'label':'	Condition and Integrity of Handling Units (HU) Details: Same RFIDs of all Handling Units, Count and Condition at three Key location: @Place of Receipt, Port of Loading & Port of Destination. All Handling Units should be in good condition when unloaded at destination port.','outcome':false,'Justification':'','liable':''},
        'b5':{'label':'Shipping Ports Used-Port of Loading should be: '+ LOCData.PortofLoading,'outcome':false,'Justification':'','liable':''},
        'b6':{'label':'Shipping Ports Used-Port of Destination should be: ' + LOCData.PortofDestination,'outcome':false,'Justification':'','liable':''},
        'b7':{'label':'Details of Consignee: ' + LOCData.DetailsofConsignee,'outcome':false,'Justification':'','liable':''},
        'b8':{'label':'Last Date of Shipment: ' + LOCData.LastDateofShipment,'outcome':false,'Justification':'','liable':''},
        'b9':{'label':'Payment Initiated?','outcome':false,'Justification':'','liable':''},
        'b10':{'label':'Title Transferred?','outcome':false,'Justification':'','liable':''}};
        BusinessRules.b1.outcome = MyContract.boolCleanOrFoul();
        BusinessRules.b2.outcome = MyContract.boolBillLadingIssued();
        BusinessRules.b3.outcome = MyContract.boolContainerIntigrity();
        BusinessRules.b4.outcome = MyContract.boolHandlingUnitCount();
        BusinessRules.b5.outcome = MyContract.boolLoadingPort();
        BusinessRules.b6.outcome = MyContract.boolDestinationPort();
        BusinessRules.b7.outcome = MyContract.boolConsignee();
        BusinessRules.b8.outcome = true;//delay is shipment that is date comparison
        BusinessRules.b9.outcome = true;
        BusinessRules.b10.outcome = true;
        callback(BusinessRules);    
  },
};

function CreateJSONString(input) {
  var output = input.replace(/"/g, "'");
  return output;
}

function CreateJSONObject(input) {
  var op = input.replace(/'/g, "\"");
  var output = JSON.parse(op);
  return output;
}